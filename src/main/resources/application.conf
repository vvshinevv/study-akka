import akka.testkit.CallingThreadDispatcher

akka {
    loglevel = DEBUG
}


specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.3s
}

# router demo
routersDemo {
    akka {
        actor.deployment {
            /poolMaster2 { # this will be the name of the actor that I'm going to instantiate. It's a subordinate of the user guardian
                router = round-robin-pool
                nr-of-instances = 5
            }
            /groupMaster2 {
                router = round-robin-group
                routees.paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
            }
        }
    }
}

# dispatcher
my-dispatcher {
    type = Dispatcher # 이 줄은 설정 블록이 디스패처를 정의한다는 것을 명시합니다. Akka에서 디스패처는 액터에게 메시지를 전달하는 역할을 합니다. PinnedDispatcher (which bind each actor to a thread pool of exactly one thread and this thread might circle around), CallingThreadDispatcher (eunsure that all invocations and all communication with an actor happen on the calling thread whatever that thread is which is why this is called the calling thread dispatcher)
    executor = "thread-pool-executor" # This is an execution service actually the JVM thread handler which handles which messages are handled on each thread. 이 설정은 디스패처가 사용할 실행자(executor) 유형을 "스레드 풀 실행자"로 지정합니다. 스레드 풀 실행자는 메시지를 처리하기 위해 스레드 풀을 사용하며, 이는 여러 액터가 동시에 실행될 수 있도록 합니다.
    thread-pool-executor {
        fixed-pool-size = 1 # 이 부분은 스레드 풀의 크기가 고정되어 있으며, 동시에 활성화될 수 있는 스레드의 최대 수는 3개라는 것을 나타냅니다. 이는 동시에 처리될 수 있는 액터 또는 작업의 수를 제한합니다.
    }
    throughput = 30 # This is the number of messages. dispatcher can handle for one actor until that thread moves to another actor. 이 설정은 디스패처가 하나의 액터로부터 다른 액터로 이동하기 전에 처리할 수 있는 메시지의 최대 수를 30개로 설정합니다. 이는 특정 액터가 리소스를 독점하는 것을 방지하고 공평한 리소스 분배를 촉진합니다.
}

# PinnedDispatcher는 각 액터를 정확히 하나의 스레드로 구성된 스레드 풀에 바인딩합니다. 이 디스패처는 특히 하나의 액터가 매우 무거운 작업을 처리할 때 유용하며, 해당 액터가 전용 스레드를 사용함으로써 다른 액터의 실행에 영향을 미치지 않도록 합니다. "this thread might circle around" 이라는 표현은 각 액터가 할당받은 스레드가 다른 액터로 순환하지 않고 항상 동일한 액터에 대해 메시지 처리를 수행한다는 것을 의미합니다. 즉, 한 액터가 할당받은 스레드는 그 액터만의 전용 스레드로 작동하며, 다른 액터와 공유되거나 재할당되지 않습니다. 이로 인해 액터의 상태 관리가 용이해지고, 동시성 관련 문제를 효과적으로 줄일 수 있습니다. 장점: 액터가 상태를 유지하는 경우, 이 디스패처는 상태 접근에 대한 동시성 문제를 방지할 수 있습니다. 액터에 할당된 스레드가 고정되기 때문에, 동일한 스레드에서 모든 메시지가 처리됩니다. 단점: 스레드 리소스를 많이 사용할 수 있으며, 각 액터가 전용 스레드를 요구하기 때문에 스레드의 비효율적 사용이 발생할 수 있습니다.
# CallingThreadDispatcher는 모든 호출과 액터와의 모든 커뮤니케이션이 호출 스레드에서 이루어지도록 보장합니다. 이는 액터가 호출된 스레드(즉, 메시지를 보낸 스레드)에서 실행되도록 함으로써, 스레드 전환 비용을 없애고 메시지 처리를 더욱 빠르게 할 수 있습니다. 장점: 이 디스패처를 사용하면 컨텍스트 스위칭 비용이 줄어들고, 호출 스레드에서 직접 액터가 처리됩니다. 따라서 테스트나 단순한 시나리오에서 유용하게 사용할 수 있습니다. 단점: 호출 스레드가 액터의 작업을 처리하므로, 블락킹 연산이 있을 경우 호출 스레드가 차단될 수 있습니다. 또한, 다중 스레드 환경에서 동시성을 관리하기 어렵습니다.
dispatcherDemo {
  akka.actor.deployment {
    /rtjvm { #actor path
      dispatcher = my-dispatcher
    }
  }
}

# mailboxes demo

mailBoxesDemo {
  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  support - ticket - dispatcher {
    mailbox -
    type = "part5infra.Mailboxes$SupportTicketPriorityMailbox"
  }

  akka.actor.deployment {
    /altControlWareActor {
      mailbox = control-mailbox
    }
  }
}